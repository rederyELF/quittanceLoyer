import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import React, { useState, useRef, useEffect } from 'react';
import { StyleSheet } from '@react-pdf/renderer';
import generatePdf  from '../utils/generatePdf';
import '../styles/Home.module.css'; // Fichier CSS pour le style du formulaire
import SignaturePad from 'signature_pad';


export default function Home() {
  const [nom, setNom] = useState('');
  const [prenom, setPrenom] = useState('');

  const [nomLocation, setNomLocation] = useState('');
  const [prenomLocation, setPrenomLocation] = useState('');

  const [adresse, setAdresse] = useState('');
  const [codePostal, setCodePostal] = useState('');
  const [ville, setVille] = useState('');
  const [date, setDate] = useState('');
  const [image, setImage] = useState(null);
  const [ownerLocation, setOwnerLocation] = useState('');
  const [datePayment, setDatePayment] = useState('');
  const [loyerAmount, setLoyerAmount] = useState('');
  const [chargesAmount, setChargesAmount] = useState('');

  const [paymentDate, setPaymentDate] = useState('');

  const [doneAt, setDoneAt] = useState('');
  const [doneDate, setDoneDate] = useState('');
  const [sign, setSign] = useState('');

  const [source, setSource] = useState('Signature');
  
  const signaturePadRef = useRef(null); // Define signaturePadRef as a useRef


  const handleSubmit = (e) => {
    e.preventDefault();
    // Appelle la fonction generatePdf avec les valeurs du formulaire
    generatePdf({ nom, prenom, nomLocation,prenomLocation, adresse, image, codePostal, ville, date, ownerLocation, datePayment, loyerAmount, chargesAmount, doneAt, doneDate, sign });
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    const reader = new FileReader();

    reader.onloadend = () => {
      setImage(reader.result);
    };

    reader.readAsDataURL(file);
  };

  useEffect(() => {
    // Initialize signaturePad on component mount
    const signaturePad = new SignaturePad(signaturePadRef.current);
    signaturePadRef.current.signaturePad = signaturePad;
  }, []);


  const clearSignature = () => {
    // Clear signaturePad
    signaturePadRef.current.signaturePad.clear(); // Access the clear() function from the stored signaturePad instance
    setSign(null);
  };

  const saveSignatureAsImage = () => {
    const signatureDataUrl = signaturePadRef.current.toDataURL();
    // Créer un nouvel objet d'image à partir de l'image de la signature
    setSign(signatureDataUrl);
  };


  return (
    <>
      <Head>
        <title>Quittance de loyer</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <p>
            Outil quittance de loyer &nbsp; <code className={styles.code}>- Fait par Ruben EDERY</code>
          </p>
        </div>
        <div className="form-container">
      <form onSubmit={handleSubmit} className="form" id='myForm'>
        <h1>Formulaire de génération de quittance de loyer</h1>
        <div className="form-group">
          <label htmlFor="nom">Nom du propriétaire : </label>
          <input
            type="text"
            id="nom"
            name="nom"
            value={nom}
            onChange={(e) => setNom(e.target.value)}
            required
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="prenom">Prénom du propriétaire: </label>
          <input
            type="text"
            id="prenom"
            name="prenom"
            value={prenom}
            onChange={(e) => setPrenom(e.target.value)}
            required
          />
        </div>

<br/>


    <div className="form-group">
      <label htmlFor="nomLocation">Nom du Locataire: </label>
      <input
        type="text"
        id="nomLocation"
        name="nomLocation"
        value={nomLocation}
        onChange={(e) => setNomLocation(e.target.value)}
        required
      />
    </div>

    <div className="form-group">
      <label htmlFor="prenomLocation">Prénom du Locataire: </label>
      <input
        type="text"
        id="prenomLocation"
        name="prenomLocation"
        value={prenomLocation}
        onChange={(e) => setPrenomLocation(e.target.value)}
        required
      />
    </div>

    <br/>


    <div className="form-group">
      <label htmlFor="adresse">Adresse du logement loué : </label>
      <input
        type="text"
        id="adresse"
        name="adresse"
        value={adresse}
        onChange={(e) => setAdresse(e.target.value)}
        required
      />
    </div>
    <div className="form-group">
      <label htmlFor="codePostal">Code Postal du logement loué: </label>
      <input
        type="text"
        id="codePostal"
        name="codePostal"
        value={codePostal}
        onChange={(e) => setCodePostal(e.target.value)}
        required
      />
    </div>

    <div className="form-group">
      <label htmlFor="ville">Ville du logement loué: </label>
      <input
        type="text"
        id="ville"
        name="ville"
        value={ville}
        onChange={(e) => setVille(e.target.value)}
        required
      />
    </div>

    <br/>


    <div className="form-group">
      <label htmlFor="date">Date : </label>
      <input
        type="date"
        id="date"
        name="date"
        value={date}
        onChange={(e) => setDate(e.target.value)}
        required
      />
    </div>
        
    <div className="form-group">
      <label htmlFor="datePayment">Date de paiement : </label>
      <input
        type="date"
        id="datePayment"
        name="datePayment"
        value={datePayment}
        onChange={(e) => setDatePayment(e.target.value)}
        required
      />
    </div>

    <div className="form-group">
      <label htmlFor="loyerAmount">Montant du loyer (Hors charges): </label>
      <input
        type="number"
        id="loyerAmount"
        name="loyerAmount"
        value={loyerAmount}
        onChange={(e) => setLoyerAmount(e.target.value)}
        required
      />
    </div>

    <div className="form-group">
      <label htmlFor="chargesAmount">Montant des charges : </label>
      <input
        type="number"
        id="chargesAmount"
        name="chargesAmount"
        value={chargesAmount}
        onChange={(e) => setChargesAmount(e.target.value)}
        required
      />
    </div>

    <br/>


    <div className="form-group">
      <label htmlFor="doneAt">Fait à : </label>
      <input
        type="text"
        id="doneAt"
        name="doneAt"
        value={doneAt}
        onChange={(e) => setDoneAt(e.target.value)}
        required
      />
    </div>
    <div className="form-group">
      <label htmlFor="doneDate">Le : </label>
      <input
        type="date"
        id="doneDate"
        name="doneDate"
        value={doneDate}
        onChange={(e) => setDoneDate(e.target.value)}
        required
      />
    </div>

    <br/>


    <div className="form-group">
      <label htmlFor="source">Choisir une signature : </label>
      <select id="source" name="source" className="select-style" onChange={(e) => {setSource(e.target.value);}}>
        <option value="Signature">Signature</option>
        <option value="Image">Image</option>
      </select>
    </div>

    <br/>

   {source === "Image" && <div className="form-group">
      <label htmlFor="image">Signature (jpeg avec fond blanc): </label>
      <input
          type="file"
          id="image"
          name="image"
          accept="image/*"
          onChange={handleImageChange}
          style={{
            border: '1px solid #ccc',
            borderRadius: '5px',
            padding: '8px',
            backgroundColor: 'white',
            color: 'black',
            fontWeight: 'normal',
            marginBottom: '10px'
          }}
        />
      </div>}
      {source === "Signature" && <div className="form-group">
        <label htmlFor="signature">Signature : </label>
        <div className="signature-container">
        <canvas ref={signaturePadRef} className={styles.signaturePad} style={{ backgroundColor: 'white' }}/>
        </div>
        <br/>

        <button type="button" class="btn-clear" onClick={clearSignature}>Effacer la signature</button>
        <button type="button" class="btn-save" onClick={saveSignatureAsImage}>Sauvegarder la signature</button>
      </div>}

      <br/>

    <button type="submit" class="submit-button">Générer PDF</button>
  </form>
</div>
      </main>
    </>
  )
}

const stylesPdf = StyleSheet.create({
  fieldLabel: {
    marginBottom: 5,
  },
  fieldValue: {
    marginBottom: 10,
  },
  image: {
    width: 200,
    height: 200,
    objectFit: 'contain',
    marginBottom: 10,
  },
});
